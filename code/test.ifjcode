.IFJcode21
CREATEFRAME


JUMP $END_FUN$write
#function write ()
LABEL $FUN$write
CREATEFRAME
#define param str
DEFVAR TF@&VAR&str
POPS TF@&VAR&str
PUSHS TF@&VAR&str
PUSHS nil@nil
JUMPIFNEQS $CHECKNIL_WRITE$
WRITE string@nil
JUMP $WRITESKIP$
LABEL $CHECKNIL_WRITE$
WRITE TF@&VAR&str
LABEL $WRITESKIP$


RETURN
LABEL $END_FUN$write



JUMP $END_FUN$reads
#function reads ()
LABEL $FUN$reads
CREATEFRAME
DEFVAR TF@$TEMP$
READ TF@$TEMP$ string
PUSHS TF@$TEMP$


RETURN
LABEL $END_FUN$reads



JUMP $END_FUN$readi
#function readi ()
LABEL $FUN$readi
CREATEFRAME
DEFVAR TF@$TEMP$
READ TF@$TEMP$ int
PUSHS TF@$TEMP$


RETURN
LABEL $END_FUN$readi



JUMP $END_FUN$readn
#function readn ()
LABEL $FUN$readn
CREATEFRAME
DEFVAR TF@$TEMP$
READ TF@$TEMP$ float
PUSHS TF@$TEMP$


RETURN
LABEL $END_FUN$readn



JUMP $END_FUN$tointeger
#function tointeger ()
LABEL $FUN$tointeger
CREATEFRAME
DEFVAR TF@&VAR&$TEMP_CHECKNIL$
POPS TF@&VAR&$TEMP_CHECKNIL$
PUSHS TF@&VAR&$TEMP_CHECKNIL$
PUSHS nil@nil
PUSHS TF@&VAR&$TEMP_CHECKNIL$
JUMPIFNEQS $TOINTCONV$
JUMP $TOINTSKIP$
LABEL $TOINTCONV$
FLOAT2INTS
LABEL $TOINTSKIP$


RETURN
LABEL $END_FUN$tointeger



JUMP $END_FUN$$OP$unaryminus
#function $OP$unaryminus ()
LABEL $FUN$$OP$unaryminus
CREATEFRAME
# $OP$checknil_single()
PUSHFRAME
CALL $FUN$$OP$checknil_single
POPFRAME
#define param $TEMP$
DEFVAR TF@&VAR&$TEMP$
POPS TF@&VAR&$TEMP$
DEFVAR TF@$TEMP$type
TYPE TF@$TEMP$type TF@&VAR&$TEMP$
PUSHS TF@$TEMP$type
PUSHS string@int
JUMPIFNEQS $UNARY$FLOAT$
PUSHS int@-1
JUMP $UNARY$END$
LABEL $UNARY$FLOAT$
PUSHS float@-0x1p+0
LABEL $UNARY$END$
PUSHS TF@&VAR&$TEMP$
MULS


RETURN
LABEL $END_FUN$$OP$unaryminus



JUMP $END_FUN$$OP$checkzero_float
#function $OP$checkzero_float ()
LABEL $FUN$$OP$checkzero_float
CREATEFRAME
#define param $TEMP_CHECKZERO$
DEFVAR TF@&VAR&$TEMP_CHECKZERO$
POPS TF@&VAR&$TEMP_CHECKZERO$
PUSHS TF@&VAR&$TEMP_CHECKZERO$
PUSHS TF@&VAR&$TEMP_CHECKZERO$
PUSHS float@0x0p+0
JUMPIFNEQS $CHECKZERO_float$
EXIT int@9
LABEL $CHECKZERO_float$


RETURN
LABEL $END_FUN$$OP$checkzero_float



JUMP $END_FUN$$OP$checkzero_int
#function $OP$checkzero_int ()
LABEL $FUN$$OP$checkzero_int
CREATEFRAME
#define param $TEMP_CHECKZERO$
DEFVAR TF@&VAR&$TEMP_CHECKZERO$
POPS TF@&VAR&$TEMP_CHECKZERO$
PUSHS TF@&VAR&$TEMP_CHECKZERO$
PUSHS TF@&VAR&$TEMP_CHECKZERO$
PUSHS int@0
JUMPIFNEQS $CHECKZERO_int$
EXIT int@9
LABEL $CHECKZERO_int$


RETURN
LABEL $END_FUN$$OP$checkzero_int



JUMP $END_FUN$$OP$checknil_single
#function $OP$checknil_single ()
LABEL $FUN$$OP$checknil_single
CREATEFRAME
#define param $TEMP_CHECKNIL$
DEFVAR TF@&VAR&$TEMP_CHECKNIL$
POPS TF@&VAR&$TEMP_CHECKNIL$
PUSHS TF@&VAR&$TEMP_CHECKNIL$
PUSHS TF@&VAR&$TEMP_CHECKNIL$
PUSHS nil@nil
JUMPIFNEQS $CHECKNIL_single$
EXIT int@8
LABEL $CHECKNIL_single$


RETURN
LABEL $END_FUN$$OP$checknil_single



JUMP $END_FUN$$OP$checknil_double
#function $OP$checknil_double ()
LABEL $FUN$$OP$checknil_double
CREATEFRAME
#define param $TEMP$B
DEFVAR TF@&VAR&$TEMP$B
POPS TF@&VAR&$TEMP$B
#define param $TEMP$A
DEFVAR TF@&VAR&$TEMP$A
POPS TF@&VAR&$TEMP$A
PUSHS nil@nil
PUSHS TF@&VAR&$TEMP$A
PUSHS nil@nil
PUSHS TF@&VAR&$TEMP$B
JUMPIFNEQS $SKIPEXIT1$
EXIT int@8
LABEL $SKIPEXIT1$
JUMPIFNEQS $SKIPEXIT2$
EXIT int@8
LABEL $SKIPEXIT2$
LABEL $ENDCHECKNILDOUBLE$
PUSHS TF@&VAR&$TEMP$A
PUSHS TF@&VAR&$TEMP$B


RETURN
LABEL $END_FUN$$OP$checknil_double



JUMP $END_FUN$$BUILTIN$sametypes
#function $BUILTIN$sametypes ()
LABEL $FUN$$BUILTIN$sametypes
CREATEFRAME
#define param $TEMP$B
DEFVAR TF@&VAR&$TEMP$B
POPS TF@&VAR&$TEMP$B
DEFVAR TF@$TEMP$typeB
TYPE TF@$TEMP$typeB TF@&VAR&$TEMP$B
#define param $TEMP$A
DEFVAR TF@&VAR&$TEMP$A
POPS TF@&VAR&$TEMP$A
DEFVAR TF@$TEMP$typeA
TYPE TF@$TEMP$typeA TF@&VAR&$TEMP$A
PUSHS TF@$TEMP$typeA
PUSHS TF@$TEMP$typeB
JUMPIFEQS $BUILTIN$sametypes$END
PUSHS string@int
PUSHS TF@$TEMP$typeA
JUMPIFNEQS $BTOFLOAT$
PUSHS TF@&VAR&$TEMP$A
INT2FLOATS
POPS TF@&VAR&$TEMP$A
JUMP $BUILTIN$sametypes$END
LABEL $BTOFLOAT$
PUSHS TF@&VAR&$TEMP$B
INT2FLOATS
POPS TF@&VAR&$TEMP$B
LABEL $BUILTIN$sametypes$END
PUSHS TF@&VAR&$TEMP$A
PUSHS TF@&VAR&$TEMP$B


RETURN
LABEL $END_FUN$$BUILTIN$sametypes



JUMP $END_FUN$$BUILTIN$forcefloats
#function $BUILTIN$forcefloats ()
LABEL $FUN$$BUILTIN$forcefloats
CREATEFRAME
#define param $TEMP$B
DEFVAR TF@&VAR&$TEMP$B
POPS TF@&VAR&$TEMP$B
DEFVAR TF@$TEMP$typeB
TYPE TF@$TEMP$typeB TF@&VAR&$TEMP$B
#define param $TEMP$A
DEFVAR TF@&VAR&$TEMP$A
POPS TF@&VAR&$TEMP$A
DEFVAR TF@$TEMP$typeA
TYPE TF@$TEMP$typeA TF@&VAR&$TEMP$A
PUSHS string@int
PUSHS TF@$TEMP$typeA
JUMPIFNEQS $SKIPCONVA$
PUSHS TF@&VAR&$TEMP$A
INT2FLOATS
POPS TF@&VAR&$TEMP$A
LABEL $SKIPCONVA$
PUSHS string@int
PUSHS TF@$TEMP$typeB
JUMPIFNEQS $SKIPCONVB$
PUSHS TF@&VAR&$TEMP$B
INT2FLOATS
POPS TF@&VAR&$TEMP$B
LABEL $SKIPCONVB$
PUSHS TF@&VAR&$TEMP$A
PUSHS TF@&VAR&$TEMP$B


RETURN
LABEL $END_FUN$$BUILTIN$forcefloats



JUMP $END_FUN$factorial
#function factorial ()
LABEL $FUN$factorial
CREATEFRAME
#define param factorial$n$0
DEFVAR TF@&VAR&factorial$n$0
POPS TF@&VAR&factorial$n$0
DEFVAR TF@&VAR&factorial$n1$1
MOVE TF@&VAR&factorial$n1$1 nil@nil
PUSHS TF@&VAR&factorial$n$0
PUSHS int@1
# $OP$checknil_double()
PUSHFRAME
CALL $FUN$$OP$checknil_double
POPFRAME
# $BUILTIN$sametypes()
PUSHFRAME
CALL $FUN$$BUILTIN$sametypes
POPFRAME
SUBS
#assign value to factorial$n1$1
POPS TF@&VAR&factorial$n1$1
PUSHS TF@&VAR&factorial$n$0
PUSHS int@2
# $OP$checknil_double()
PUSHFRAME
CALL $FUN$$OP$checknil_double
POPFRAME
# $BUILTIN$sametypes()
PUSHFRAME
CALL $FUN$$BUILTIN$sametypes
POPFRAME
# start operator A<B
LTS
# end operator A<B
#if 0
PUSHS bool@true
JUMPIFNEQS $ELSE$START$0
PUSHS int@1
RETURN
#end of if 0
JUMP $ELSE$END$0
LABEL $ELSE$START$0
DEFVAR TF@&VAR&factorial$tmp$2
MOVE TF@&VAR&factorial$tmp$2 nil@nil
PUSHS TF@&VAR&factorial$n1$1
# factorial()
PUSHFRAME
CALL $FUN$factorial
POPFRAME
#assign value to factorial$tmp$2
POPS TF@&VAR&factorial$tmp$2
PUSHS TF@&VAR&factorial$n$0
PUSHS TF@&VAR&factorial$tmp$2
# $OP$checknil_double()
PUSHFRAME
CALL $FUN$$OP$checknil_double
POPFRAME
# $BUILTIN$sametypes()
PUSHFRAME
CALL $FUN$$BUILTIN$sametypes
POPFRAME
MULS
RETURN
#end of else and the whole if 0 statement
LABEL $ELSE$END$0


RETURN
LABEL $END_FUN$factorial



JUMP $END_FUN$main
#function main ()
LABEL $FUN$main
CREATEFRAME
#here
PUSHS string@Zadejte\032cislo\032pro\032vypocet\032faktorialu:\032
# write()
PUSHFRAME
CALL $FUN$write
POPFRAME
DEFVAR TF@&VAR&main$a$3
MOVE TF@&VAR&main$a$3 nil@nil
# readi()
PUSHFRAME
CALL $FUN$readi
POPFRAME
#assign value to main$a$3
POPS TF@&VAR&main$a$3
PUSHS TF@&VAR&main$a$3
PUSHS nil@nil
# $BUILTIN$sametypes()
PUSHFRAME
CALL $FUN$$BUILTIN$sametypes
POPFRAME
# start operator A~=B
EQS
NOTS
# end operator A~=B
#if 1
PUSHS bool@true
JUMPIFNEQS $ELSE$START$1
PUSHS TF@&VAR&main$a$3
PUSHS int@0
# $OP$checknil_double()
PUSHFRAME
CALL $FUN$$OP$checknil_double
POPFRAME
# $BUILTIN$sametypes()
PUSHFRAME
CALL $FUN$$BUILTIN$sametypes
POPFRAME
# start operator A<B
LTS
# end operator A<B
#if 2
PUSHS bool@true
JUMPIFNEQS $ELSE$START$2
#here
PUSHS string@Faktorial\032nejde\032spocitat!
# write()
PUSHFRAME
CALL $FUN$write
POPFRAME
#here
PUSHS string@\010
# write()
PUSHFRAME
CALL $FUN$write
POPFRAME
#end of if 2
JUMP $ELSE$END$2
LABEL $ELSE$START$2
DEFVAR TF@&VAR&main$vysl$4
MOVE TF@&VAR&main$vysl$4 nil@nil
PUSHS TF@&VAR&main$a$3
# factorial()
PUSHFRAME
CALL $FUN$factorial
POPFRAME
#assign value to main$vysl$4
POPS TF@&VAR&main$vysl$4
#here
PUSHS string@Vysledek\032je\032
# write()
PUSHFRAME
CALL $FUN$write
POPFRAME
PUSHS TF@&VAR&main$vysl$4
# write()
PUSHFRAME
CALL $FUN$write
POPFRAME
#here
PUSHS string@\010
# write()
PUSHFRAME
CALL $FUN$write
POPFRAME
#end of else and the whole if 2 statement
LABEL $ELSE$END$2
#end of if 1
JUMP $ELSE$END$1
LABEL $ELSE$START$1
#here
PUSHS string@Chyba\032pri\032nacitani\032celeho\032cisla!\010
# write()
PUSHFRAME
CALL $FUN$write
POPFRAME
#end of else and the whole if 1 statement
LABEL $ELSE$END$1


RETURN
LABEL $END_FUN$main

# main()
PUSHFRAME
CALL $FUN$main
POPFRAME
