.IFJcode21
CREATEFRAME


JUMP $END_FUN$$OP$unaryminus
#function $OP$unaryminus ()
LABEL $FUN$$OP$unaryminus
CREATEFRAME
# $OP$checknil_single()
PUSHFRAME
CALL $FUN$$OP$checknil_single
POPFRAME
#define param $TEMP$
DEFVAR TF@&VAR&$TEMP$
POPS TF@&VAR&$TEMP$
DEFVAR TF@$TEMP$type
TYPE TF@$TEMP$type TF@&VAR&$TEMP$
PUSHS TF@$TEMP$type
PUSHS string@int
JUMPIFNEQS $UNARY$FLOAT$
PUSHS int@-1
JUMP $UNARY$END$
LABEL $UNARY$FLOAT$
PUSHS float@-0x1p+0
LABEL $UNARY$END$
PUSHS TF@&VAR&$TEMP$
MULS


RETURN
LABEL $END_FUN$$OP$unaryminus



JUMP $END_FUN$$OP$checkzero_float
#function $OP$checkzero_float ()
LABEL $FUN$$OP$checkzero_float
CREATEFRAME
#define param $TEMP_CHECKZERO$
DEFVAR TF@&VAR&$TEMP_CHECKZERO$
POPS TF@&VAR&$TEMP_CHECKZERO$
PUSHS TF@&VAR&$TEMP_CHECKZERO$
PUSHS TF@&VAR&$TEMP_CHECKZERO$
PUSHS float@0x0p+0
JUMPIFNEQS $CHECKZERO_float$
EXIT int@9
LABEL $CHECKZERO_float$


RETURN
LABEL $END_FUN$$OP$checkzero_float



JUMP $END_FUN$$OP$checkzero_int
#function $OP$checkzero_int ()
LABEL $FUN$$OP$checkzero_int
CREATEFRAME
#define param $TEMP_CHECKZERO$
DEFVAR TF@&VAR&$TEMP_CHECKZERO$
POPS TF@&VAR&$TEMP_CHECKZERO$
PUSHS TF@&VAR&$TEMP_CHECKZERO$
PUSHS TF@&VAR&$TEMP_CHECKZERO$
PUSHS int@0
JUMPIFNEQS $CHECKZERO_int$
EXIT int@9
LABEL $CHECKZERO_int$


RETURN
LABEL $END_FUN$$OP$checkzero_int



JUMP $END_FUN$$OP$checknil_single
#function $OP$checknil_single ()
LABEL $FUN$$OP$checknil_single
CREATEFRAME
#define param $TEMP_CHECKNIL$
DEFVAR TF@&VAR&$TEMP_CHECKNIL$
POPS TF@&VAR&$TEMP_CHECKNIL$
PUSHS TF@&VAR&$TEMP_CHECKNIL$
PUSHS TF@&VAR&$TEMP_CHECKNIL$
PUSHS nil@nil
JUMPIFNEQS $CHECKNIL_single$
EXIT int@8
LABEL $CHECKNIL_single$


RETURN
LABEL $END_FUN$$OP$checknil_single



JUMP $END_FUN$$OP$checknil_double
#function $OP$checknil_double ()
LABEL $FUN$$OP$checknil_double
CREATEFRAME
#define param $TEMP$B
DEFVAR TF@&VAR&$TEMP$B
POPS TF@&VAR&$TEMP$B
#define param $TEMP$A
DEFVAR TF@&VAR&$TEMP$A
POPS TF@&VAR&$TEMP$A
PUSHS nil@nil
PUSHS TF@&VAR&$TEMP$A
PUSHS nil@nil
PUSHS TF@&VAR&$TEMP$B
JUMPIFNEQS $SKIPEXIT1$
EXIT int@8
LABEL $SKIPEXIT1$
JUMPIFNEQS $SKIPEXIT2$
EXIT int@8
LABEL $SKIPEXIT2$
LABEL $ENDCHECKNILDOUBLE$
PUSHS TF@&VAR&$TEMP$A
PUSHS TF@&VAR&$TEMP$B


RETURN
LABEL $END_FUN$$OP$checknil_double



JUMP $END_FUN$$BUILTIN$sametypes
#function $BUILTIN$sametypes ()
LABEL $FUN$$BUILTIN$sametypes
CREATEFRAME
#define param $TEMP$B
DEFVAR TF@&VAR&$TEMP$B
POPS TF@&VAR&$TEMP$B
DEFVAR TF@$TEMP$typeB
TYPE TF@$TEMP$typeB TF@&VAR&$TEMP$B
#define param $TEMP$A
DEFVAR TF@&VAR&$TEMP$A
POPS TF@&VAR&$TEMP$A
DEFVAR TF@$TEMP$typeA
TYPE TF@$TEMP$typeA TF@&VAR&$TEMP$A
PUSHS TF@$TEMP$typeA
PUSHS string@int
EQS
PUSHS TF@$TEMP$typeB
PUSHS string@float
EQS
ANDS
PUSHS bool@true
JUMPIFEQS $ATOFLOAT$
PUSHS TF@$TEMP$typeA
PUSHS string@float
EQS
PUSHS TF@$TEMP$typeB
PUSHS string@int
EQS
ANDS
PUSHS bool@true
JUMPIFEQS $BTOFLOAT$
JUMP $BUILTIN$sametypes$END
LABEL $ATOFLOAT$
PUSHS TF@&VAR&$TEMP$A
INT2FLOATS
POPS TF@&VAR&$TEMP$A
JUMP $BUILTIN$sametypes$END
LABEL $BTOFLOAT$
PUSHS TF@&VAR&$TEMP$B
INT2FLOATS
POPS TF@&VAR&$TEMP$B
LABEL $BUILTIN$sametypes$END
PUSHS TF@&VAR&$TEMP$A
PUSHS TF@&VAR&$TEMP$B


RETURN
LABEL $END_FUN$$BUILTIN$sametypes



JUMP $END_FUN$$BUILTIN$forcefloats
#function $BUILTIN$forcefloats ()
LABEL $FUN$$BUILTIN$forcefloats
CREATEFRAME
#define param $TEMP$B
DEFVAR TF@&VAR&$TEMP$B
POPS TF@&VAR&$TEMP$B
DEFVAR TF@$TEMP$typeB
TYPE TF@$TEMP$typeB TF@&VAR&$TEMP$B
#define param $TEMP$A
DEFVAR TF@&VAR&$TEMP$A
POPS TF@&VAR&$TEMP$A
DEFVAR TF@$TEMP$typeA
TYPE TF@$TEMP$typeA TF@&VAR&$TEMP$A
PUSHS string@int
PUSHS TF@$TEMP$typeA
JUMPIFNEQS $SKIPCONVA2FLOAT$
PUSHS TF@&VAR&$TEMP$A
INT2FLOATS
POPS TF@&VAR&$TEMP$A
LABEL $SKIPCONVA2FLOAT$
PUSHS string@int
PUSHS TF@$TEMP$typeB
JUMPIFNEQS $SKIPCONVB2FLOAT$
PUSHS TF@&VAR&$TEMP$B
INT2FLOATS
POPS TF@&VAR&$TEMP$B
LABEL $SKIPCONVB2FLOAT$
PUSHS TF@&VAR&$TEMP$A
PUSHS TF@&VAR&$TEMP$B


RETURN
LABEL $END_FUN$$BUILTIN$forcefloats



JUMP $END_FUN$$BUILTIN$forceints
#function $BUILTIN$forceints ()
LABEL $FUN$$BUILTIN$forceints
CREATEFRAME
#define param $TEMP$B
DEFVAR TF@&VAR&$TEMP$B
POPS TF@&VAR&$TEMP$B
DEFVAR TF@$TEMP$typeB
TYPE TF@$TEMP$typeB TF@&VAR&$TEMP$B
#define param $TEMP$A
DEFVAR TF@&VAR&$TEMP$A
POPS TF@&VAR&$TEMP$A
DEFVAR TF@$TEMP$typeA
TYPE TF@$TEMP$typeA TF@&VAR&$TEMP$A
PUSHS string@float
PUSHS TF@$TEMP$typeA
JUMPIFNEQS $SKIPCONVA$2INT
PUSHS TF@&VAR&$TEMP$A
FLOAT2INTS
POPS TF@&VAR&$TEMP$A
LABEL $SKIPCONVA$2INT
PUSHS string@float
PUSHS TF@$TEMP$typeB
JUMPIFNEQS $SKIPCONVB$2INT
PUSHS TF@&VAR&$TEMP$B
FLOAT2INTS
POPS TF@&VAR&$TEMP$B
LABEL $SKIPCONVB$2INT
PUSHS TF@&VAR&$TEMP$A
PUSHS TF@&VAR&$TEMP$B


RETURN
LABEL $END_FUN$$BUILTIN$forceints



JUMP $END_FUN$$BUILTIN$tobool
#function $BUILTIN$tobool ()
LABEL $FUN$$BUILTIN$tobool
CREATEFRAME
#define param TMP
DEFVAR TF@&VAR&TMP
POPS TF@&VAR&TMP
DEFVAR TF@$TYPE$
TYPE TF@$TYPE$ TF@&VAR&TMP
PUSHS TF@$TYPE$
PUSHS string@bool
JUMPIFEQS $toboolORIGINAL$
PUSHS TF@$TYPE$
PUSHS string@nil
JUMPIFEQS $toboolFALSE$
PUSHS bool@true
JUMP $toboolEND$
LABEL $toboolORIGINAL$
PUSHS TF@&VAR&TMP
JUMP $toboolEND$
LABEL $toboolFALSE$
PUSHS bool@false
LABEL $toboolEND$


RETURN
LABEL $END_FUN$$BUILTIN$tobool



JUMP $END_FUN$$IMPLICIT$int2num
#function $IMPLICIT$int2num ()
LABEL $FUN$$IMPLICIT$int2num
CREATEFRAME
#define param TMP
DEFVAR TF@&VAR&TMP
POPS TF@&VAR&TMP
DEFVAR TF@$TYPE$
TYPE TF@$TYPE$ TF@&VAR&TMP
PUSHS TF@&VAR&TMP
PUSHS TF@$TYPE$
PUSHS string@nil
JUMPIFEQS $int2numSKIPCONVERSION$
PUSHS TF@$TYPE$
PUSHS string@float
JUMPIFEQS $int2numSKIPCONVERSION$
INT2FLOATS
LABEL $int2numSKIPCONVERSION$


RETURN
LABEL $END_FUN$$IMPLICIT$int2num



JUMP $END_FUN$$BUILTIN_POW$
#function $BUILTIN_POW$ ()
LABEL $FUN$$BUILTIN_POW$
CREATEFRAME
# $OP$checknil_double()
PUSHFRAME
CALL $FUN$$OP$checknil_double
POPFRAME
#define param exponent
DEFVAR TF@&VAR&exponent
POPS TF@&VAR&exponent
#define param base
DEFVAR TF@&VAR&base
POPS TF@&VAR&base
DEFVAR TF@&VAR&base_type
TYPE TF@&VAR&base_type TF@&VAR&base
JUMPIFEQ $POW_SKIP_CONVERT$ string@float TF@&VAR&base_type
INT2FLOAT TF@&VAR&base TF@&VAR&base
LABEL $POW_SKIP_CONVERT$
JUMPIFEQ $POW_ZERO$ int@0 TF@&VAR&exponent
PUSHS TF@&VAR&exponent
PUSHS int@0
# $OP$checknil_double()
PUSHFRAME
CALL $FUN$$OP$checknil_double
POPFRAME
# $BUILTIN$sametypes()
PUSHFRAME
CALL $FUN$$BUILTIN$sametypes
POPFRAME
# start operator A<B
LTS
# end operator A<B
PUSHS bool@true
JUMPIFNEQS $POW_FLIP_SKIP$
MUL TF@&VAR&exponent int@-1 TF@&VAR&exponent
DIV TF@&VAR&base float@0x1p+0 TF@&VAR&base
LABEL $POW_FLIP_SKIP$
PUSHS TF@&VAR&base
LABEL $POW_START_CYCLE$
JUMPIFEQ $POW_END_CYCLE$ int@1 TF@&VAR&exponent
PUSHS TF@&VAR&base
MULS
SUB TF@&VAR&exponent TF@&VAR&exponent int@1
JUMP $POW_START_CYCLE$
LABEL $POW_END_CYCLE$
JUMP $POW_END$
LABEL $POW_ZERO$
PUSHS float@0x1p+0
LABEL $POW_END$


RETURN
LABEL $END_FUN$$BUILTIN_POW$



JUMP $END_FUN$$BUILTIN_MOD$
#function $BUILTIN_MOD$ ()
LABEL $FUN$$BUILTIN_MOD$
CREATEFRAME
# $BUILTIN$forcefloats()
PUSHFRAME
CALL $FUN$$BUILTIN$forcefloats
POPFRAME
# $OP$checkzero_float()
PUSHFRAME
CALL $FUN$$OP$checkzero_float
POPFRAME
#define param B
DEFVAR TF@&VAR&B
POPS TF@&VAR&B
#define param A
DEFVAR TF@&VAR&A
POPS TF@&VAR&A
DEFVAR TF@&VAR&negative
MOVE TF@&VAR&negative bool@false
DEFVAR TF@&VAR&A_TYPE
DEFVAR TF@&VAR&B_TYPE
TYPE TF@&VAR&A_TYPE TF@&VAR&A
TYPE TF@&VAR&B_TYPE TF@&VAR&B
PUSHS TF@&VAR&A
PUSHS float@0x0p+0
# $OP$checknil_double()
PUSHFRAME
CALL $FUN$$OP$checknil_double
POPFRAME
# $BUILTIN$sametypes()
PUSHFRAME
CALL $FUN$$BUILTIN$sametypes
POPFRAME
# start operator A<B
LTS
# end operator A<B
PUSHS bool@true
JUMPIFNEQS $SKIP_A_FLOAT$
MUL TF@&VAR&A TF@&VAR&A float@-0x1p+0
LABEL $SKIP_A_FLOAT$
PUSHS TF@&VAR&B
PUSHS float@0x0p+0
# $OP$checknil_double()
PUSHFRAME
CALL $FUN$$OP$checknil_double
POPFRAME
# $BUILTIN$sametypes()
PUSHFRAME
CALL $FUN$$BUILTIN$sametypes
POPFRAME
# start operator A<B
LTS
# end operator A<B
PUSHS bool@true
JUMPIFNEQS $SKIP_B_FLOAT$
MOVE TF@&VAR&negative bool@true
MUL TF@&VAR&B TF@&VAR&B float@-0x1p+0
LABEL $SKIP_B_FLOAT$
LABEL $MOD_CYCLE$
PUSHS TF@&VAR&A
PUSHS TF@&VAR&B
# $OP$checknil_double()
PUSHFRAME
CALL $FUN$$OP$checknil_double
POPFRAME
# $BUILTIN$sametypes()
PUSHFRAME
CALL $FUN$$BUILTIN$sametypes
POPFRAME
# start operator A<B
LTS
# end operator A<B
PUSHS bool@true
JUMPIFEQS $MOD_CYCLE_END$
SUB TF@&VAR&A TF@&VAR&A TF@&VAR&B
JUMP $MOD_CYCLE$
LABEL $MOD_CYCLE_END$
PUSHS TF@&VAR&A
JUMPIFNEQ $SKIP_NEGATIVE$ bool@true TF@&VAR&negative
PUSHS float@-0x1p+0
MULS
LABEL $SKIP_NEGATIVE$


RETURN
LABEL $END_FUN$$BUILTIN_MOD$

