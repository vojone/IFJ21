.IFJcode21
CREATEFRAME


JUMP $END_FUN$write
JUMP $END_FUN$write
#function write ()
LABEL $FUN$write
CREATEFRAME
#define param str
DEFVAR TF@&VAR&str
POPS TF@&VAR&str
PUSHS TF@&VAR&str
PUSHS nil@nil
JUMPIFNEQS $CHECKNIL_WRITE$
WRITE string@nil
JUMP $WRITESKIP$
LABEL $CHECKNIL_WRITE$
WRITE TF@&VAR&str
LABEL $WRITESKIP$


RETURN
LABEL $END_FUN$write



JUMP $END_FUN$reads
JUMP $END_FUN$reads
#function reads ()
LABEL $FUN$reads
CREATEFRAME
DEFVAR TF@$TEMP$
READ TF@$TEMP$ string
PUSHS TF@$TEMP$


RETURN
LABEL $END_FUN$reads



JUMP $END_FUN$readi
JUMP $END_FUN$readi
#function readi ()
LABEL $FUN$readi
CREATEFRAME
DEFVAR TF@$TEMP$
READ TF@$TEMP$ int
PUSHS TF@$TEMP$


RETURN
LABEL $END_FUN$readi



JUMP $END_FUN$readn
JUMP $END_FUN$readn
#function readn ()
LABEL $FUN$readn
CREATEFRAME
DEFVAR TF@$TEMP$
READ TF@$TEMP$ float
PUSHS TF@$TEMP$


RETURN
LABEL $END_FUN$readn



JUMP $END_FUN$tointeger
JUMP $END_FUN$tointeger
#function tointeger ()
LABEL $FUN$tointeger
CREATEFRAME
DEFVAR TF@&VAR&$TEMP_CHECKNIL$
POPS TF@&VAR&$TEMP_CHECKNIL$
PUSHS TF@&VAR&$TEMP_CHECKNIL$
PUSHS nil@nil
PUSHS TF@&VAR&$TEMP_CHECKNIL$
JUMPIFNEQS $TOINTCONV$
JUMP $TOINTSKIP$
LABEL $TOINTCONV$
FLOAT2INTS
LABEL $TOINTSKIP$


RETURN
LABEL $END_FUN$tointeger



JUMP $END_FUN$chr
JUMP $END_FUN$chr
#function chr ()
LABEL $FUN$chr
CREATEFRAME
# $OP$checknil_single()
PUSHFRAME
CALL $FUN$$OP$checknil_single
POPFRAME
DEFVAR TF@&VAR&$TEMP_chr$
POPS TF@&VAR&$TEMP_chr$
PUSHS TF@&VAR&$TEMP_chr$
PUSHS int@0
# $OP$checknil_double()
PUSHFRAME
CALL $FUN$$OP$checknil_double
POPFRAME
# $BUILTIN$sametypes()
PUSHFRAME
CALL $FUN$$BUILTIN$sametypes
POPFRAME
# start operator A>=B
PUSHFRAME
CREATEFRAME
DEFVAR TF@!TMP!A
DEFVAR TF@!TMP!B
POPS TF@!TMP!B
POPS TF@!TMP!A
PUSHS TF@!TMP!A
PUSHS TF@!TMP!B
PUSHS TF@!TMP!A
PUSHS TF@!TMP!B
DEFVAR TF@!TMP!LTRES
GTS
POPS TF@!TMP!LTRES
EQS
PUSHS TF@!TMP!LTRES
ORS
POPFRAME
# end operator A>=B
PUSHS TF@&VAR&$TEMP_chr$
PUSHS int@255
# $OP$checknil_double()
PUSHFRAME
CALL $FUN$$OP$checknil_double
POPFRAME
# $BUILTIN$sametypes()
PUSHFRAME
CALL $FUN$$BUILTIN$sametypes
POPFRAME
# start operator A<=B
PUSHFRAME
CREATEFRAME
DEFVAR TF@!TMP!A
DEFVAR TF@!TMP!B
POPS TF@!TMP!B
POPS TF@!TMP!A
DEFVAR TF@!TYPE!A
TYPE TF@!TYPE!A TF@!TMP!A
PUSHS TF@!TMP!A
PUSHS TF@!TMP!B
PUSHS TF@!TMP!A
PUSHS TF@!TMP!B
DEFVAR TF@!TMP!LTRES
LTS
POPS TF@!TMP!LTRES
EQS
PUSHS TF@!TMP!LTRES
ORS
POPFRAME
# end operator A<=B
JUMPIFNEQS $SKIPCONVER$
PUSHS TF@&VAR&$TEMP_chr$
INT2CHARS
JUMP $CHARSEND$
LABEL $SKIPCONVER$
PUSHS nil@nil
LABEL $CHARSEND$


RETURN
LABEL $END_FUN$chr



JUMP $END_FUN$$OP$unaryminus
JUMP $END_FUN$$OP$unaryminus
#function $OP$unaryminus ()
LABEL $FUN$$OP$unaryminus
CREATEFRAME
# $OP$checknil_single()
PUSHFRAME
CALL $FUN$$OP$checknil_single
POPFRAME
#define param $TEMP$
DEFVAR TF@&VAR&$TEMP$
POPS TF@&VAR&$TEMP$
DEFVAR TF@$TEMP$type
TYPE TF@$TEMP$type TF@&VAR&$TEMP$
PUSHS TF@$TEMP$type
PUSHS string@int
JUMPIFNEQS $UNARY$FLOAT$
PUSHS int@-1
JUMP $UNARY$END$
LABEL $UNARY$FLOAT$
PUSHS float@-0x1p+0
LABEL $UNARY$END$
PUSHS TF@&VAR&$TEMP$
MULS


RETURN
LABEL $END_FUN$$OP$unaryminus



JUMP $END_FUN$$OP$checkzero_float
JUMP $END_FUN$$OP$checkzero_float
#function $OP$checkzero_float ()
LABEL $FUN$$OP$checkzero_float
CREATEFRAME
#define param $TEMP_CHECKZERO$
DEFVAR TF@&VAR&$TEMP_CHECKZERO$
POPS TF@&VAR&$TEMP_CHECKZERO$
PUSHS TF@&VAR&$TEMP_CHECKZERO$
PUSHS TF@&VAR&$TEMP_CHECKZERO$
PUSHS float@0x0p+0
JUMPIFNEQS $CHECKZERO_float$
EXIT int@9
LABEL $CHECKZERO_float$


RETURN
LABEL $END_FUN$$OP$checkzero_float



JUMP $END_FUN$$OP$checkzero_int
JUMP $END_FUN$$OP$checkzero_int
#function $OP$checkzero_int ()
LABEL $FUN$$OP$checkzero_int
CREATEFRAME
#define param $TEMP_CHECKZERO$
DEFVAR TF@&VAR&$TEMP_CHECKZERO$
POPS TF@&VAR&$TEMP_CHECKZERO$
PUSHS TF@&VAR&$TEMP_CHECKZERO$
PUSHS TF@&VAR&$TEMP_CHECKZERO$
PUSHS int@0
JUMPIFNEQS $CHECKZERO_int$
EXIT int@9
LABEL $CHECKZERO_int$


RETURN
LABEL $END_FUN$$OP$checkzero_int



JUMP $END_FUN$$OP$checknil_single
JUMP $END_FUN$$OP$checknil_single
#function $OP$checknil_single ()
LABEL $FUN$$OP$checknil_single
CREATEFRAME
#define param $TEMP_CHECKNIL$
DEFVAR TF@&VAR&$TEMP_CHECKNIL$
POPS TF@&VAR&$TEMP_CHECKNIL$
PUSHS TF@&VAR&$TEMP_CHECKNIL$
PUSHS TF@&VAR&$TEMP_CHECKNIL$
PUSHS nil@nil
JUMPIFNEQS $CHECKNIL_single$
EXIT int@8
LABEL $CHECKNIL_single$


RETURN
LABEL $END_FUN$$OP$checknil_single



JUMP $END_FUN$$OP$checknil_double
JUMP $END_FUN$$OP$checknil_double
#function $OP$checknil_double ()
LABEL $FUN$$OP$checknil_double
CREATEFRAME
#define param $TEMP$B
DEFVAR TF@&VAR&$TEMP$B
POPS TF@&VAR&$TEMP$B
#define param $TEMP$A
DEFVAR TF@&VAR&$TEMP$A
POPS TF@&VAR&$TEMP$A
PUSHS nil@nil
PUSHS TF@&VAR&$TEMP$A
PUSHS nil@nil
PUSHS TF@&VAR&$TEMP$B
JUMPIFNEQS $SKIPEXIT1$
EXIT int@8
LABEL $SKIPEXIT1$
JUMPIFNEQS $SKIPEXIT2$
EXIT int@8
LABEL $SKIPEXIT2$
LABEL $ENDCHECKNILDOUBLE$
PUSHS TF@&VAR&$TEMP$A
PUSHS TF@&VAR&$TEMP$B


RETURN
LABEL $END_FUN$$OP$checknil_double



JUMP $END_FUN$$BUILTIN$sametypes
JUMP $END_FUN$$BUILTIN$sametypes
#function $BUILTIN$sametypes ()
LABEL $FUN$$BUILTIN$sametypes
CREATEFRAME
#define param $TEMP$B
DEFVAR TF@&VAR&$TEMP$B
POPS TF@&VAR&$TEMP$B
DEFVAR TF@$TEMP$typeB
TYPE TF@$TEMP$typeB TF@&VAR&$TEMP$B
#define param $TEMP$A
DEFVAR TF@&VAR&$TEMP$A
POPS TF@&VAR&$TEMP$A
DEFVAR TF@$TEMP$typeA
TYPE TF@$TEMP$typeA TF@&VAR&$TEMP$A
PUSHS TF@$TEMP$typeA
PUSHS TF@$TEMP$typeB
JUMPIFEQS $BUILTIN$sametypes$END
PUSHS string@int
PUSHS TF@$TEMP$typeA
JUMPIFNEQS $BTOFLOAT$
PUSHS TF@&VAR&$TEMP$A
INT2FLOATS
POPS TF@&VAR&$TEMP$A
JUMP $BUILTIN$sametypes$END
LABEL $BTOFLOAT$
PUSHS TF@&VAR&$TEMP$B
INT2FLOATS
POPS TF@&VAR&$TEMP$B
LABEL $BUILTIN$sametypes$END
PUSHS TF@&VAR&$TEMP$A
PUSHS TF@&VAR&$TEMP$B


RETURN
LABEL $END_FUN$$BUILTIN$sametypes



JUMP $END_FUN$$BUILTIN$forcefloats
JUMP $END_FUN$$BUILTIN$forcefloats
#function $BUILTIN$forcefloats ()
LABEL $FUN$$BUILTIN$forcefloats
CREATEFRAME
#define param $TEMP$B
DEFVAR TF@&VAR&$TEMP$B
POPS TF@&VAR&$TEMP$B
DEFVAR TF@$TEMP$typeB
TYPE TF@$TEMP$typeB TF@&VAR&$TEMP$B
#define param $TEMP$A
DEFVAR TF@&VAR&$TEMP$A
POPS TF@&VAR&$TEMP$A
DEFVAR TF@$TEMP$typeA
TYPE TF@$TEMP$typeA TF@&VAR&$TEMP$A
PUSHS string@int
PUSHS TF@$TEMP$typeA
JUMPIFNEQS $SKIPCONVA$
PUSHS TF@&VAR&$TEMP$A
INT2FLOATS
POPS TF@&VAR&$TEMP$A
LABEL $SKIPCONVA$
PUSHS string@int
PUSHS TF@$TEMP$typeB
JUMPIFNEQS $SKIPCONVB$
PUSHS TF@&VAR&$TEMP$B
INT2FLOATS
POPS TF@&VAR&$TEMP$B
LABEL $SKIPCONVB$
PUSHS TF@&VAR&$TEMP$A
PUSHS TF@&VAR&$TEMP$B


RETURN
LABEL $END_FUN$$BUILTIN$forcefloats



JUMP $END_FUN$foo
JUMP $END_FUN$foo
#function foo ()
LABEL $FUN$foo
CREATEFRAME
RETURN


RETURN
LABEL $END_FUN$foo



JUMP $END_FUN$main
JUMP $END_FUN$main
#function main ()
LABEL $FUN$main
CREATEFRAME
# foo()
PUSHFRAME
CALL $FUN$foo
POPFRAME


RETURN
LABEL $END_FUN$main

# main()
PUSHFRAME
CALL $FUN$main
POPFRAME
