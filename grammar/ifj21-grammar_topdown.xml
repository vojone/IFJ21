<!--
******************************************************************************
 *                                  IFJ21
 *                        ifj21-grammar-topdown.xml
 * 
 *          Authors: Radek Marek, Vojtech Dvorak, Juraj Dedic, Tomas Dvorak
 * Purpose: File for grammar definition for recursive descent parsing 
 * 
 *                    Last change: 14. 11. 2021
 *****************************************************************************

 * @file ifj21-grammar-topdown.xml
 * @brief File for grammar definition for recursive descent parsing
 * 
 * @authors Radek Marek, Vojtech Dvorak, Juraj Dedic, Tomas Dvorak
-->

<program>               -> <global-statement-list>  <!--Only require and functions basically-->

<statement-list>        -> <statement> <statement-list>
<statement-list>        -> [eps]
<statement-list>        -> <function-call>

<!-- require -->
<global-statement>      -> require [string]

<!-- VARIABLES -->
<statement>             -> global [id] : [type] <value-assignment>
<statement>             -> local  [id] : [type] <value-assignment>
<value-assignment>      -> [eps]
<value-assignment>      -> = <expression>

<!-- Assignment to variable(s) -->
<statement>             -> <assignment>
<assignment>            -> <id-list> = <expression-list>

<id-list>       ->  [id] <id-list-1>
<id-list-1>     -> , [id] <id-list-1>
<id-list-1>     -> [eps]


<!-- <multiple-assignment>   -> = 
<multiple-assignment>   -> , [id] <multiple-assignment> <expression> , -->



<!--IF ELSE-->
<statement>             -> if <expression> then <statement-list> <else-branch> end
<else-branch>           -> [eps]
<else-branch>           -> else <statement-list>

<!--WHILE-->
<statement>             -> while <expression> do <statement-list> end
<while>

<!--FUNCTIONS CALL-->
<global-statement>      -> <function-call>
<statement>             -> [function-id](<argument-list>)
<argument-list>         -> <argument> <argument-list-1> <!--FIX COMMAS-->
<argument-list>         -> [eps] 
<argument-list-1>       -> , <argument> <argument-list-1>
<argument-list-1>       -> [eps]
<argument>              -> <expression>

<!--FUNCTIONS DEFINITION-->
<global-statement-list> -> <global-statement> <global-statement-list>
<global-statement>      -> function [id](<param-list>) <type-list> <statement-list> end
<function-type-def>     -> [eps]
<function-type-def>     -> <type-list>

<!--Functions parameters-->
<param-list>            -> [id] : [type] <param-list-1>
<param-list-1>          -> , [id] : [type] <param-list-1>
<param-list-1>          -> eps

<!--Function types-->
<type-list>             -> [eps]
<type-list>             -> : [type] <type-list-1>
<type-list-1>           -> , [type] <type-list-1>
<type-list-1>           -> [eps]

<!--Function return-->
<statement>             -> return <expression-list>
<statement>             -> return

<!-- Expression lists are used in RETURN or in ASSIGNMENT -->
<expression-list>       ->  <expression> <expression-list-1>
<expression-list-1>     -> , <expression> <expression-list-1>
<expression-list-1>     -> [eps]